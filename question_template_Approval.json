{
    "vulnerabilityType": "Approval Not Cleared",
    "prompts": {
        "zeroShot": [
            {
                "id": 1,
                "content": "Please check if the following smart contract has an Approval Not Cleared vulnerability. Answer only 'yes' or 'no'."
            },
            {
                "id": 2,
                "content": "Kindly examine the smart contract below for an Approval Not Cleared vulnerability. Respond with either 'yes' or 'no'."
            },
            {
                "id": 3,
                "content": "Can you verify if the given smart contract contains an Approval Not Cleared vulnerability? Just say 'yes' or 'no'."
            },
            {
                "id": 4,
                "content": "Plz check if the folowing smart contract has an Approval Not Cleared vulnerability. Answer only 'yes' or 'no'."
            },
            {
                "id": 5,
                "content": "Analyze the smart contract provided for the presence of an Approval Not Cleared vulnerability. Your response should be limited to 'yes' or 'no'."
            },
            {
                "id": 6,
                "content": "Does the smart contract below have an Approval Not Cleared vulnerability? Answer with a simple 'yes' or 'no'."
            },
            {
                "id": 7,
                "content": "Evaluate the following smart contract for an Approval Not Cleared vulnerability. Provide only a 'yes' or 'no' answer."
            },
            {
                "id": 8,
                "content": "Check if the smart contract has a Approval Not Cleared vulnerability. Respond with 'yes' or 'no' only."
            },
            {
                "id": 9,
                "content": "Examine the smart contract for an Approval Not Cleared vulnerability. Your answer should be either 'yes' or 'no'."
            },
            {
                "id": 10,
                "content": "Is there an Approval Not Cleared vulnerability in the following smart contract? Answer 'yes' or 'no'."
            },
            {
                "id": 11,
                "content": "Plz check if the smart contract has an Approval Not Cleared vulnerability. Only answer 'yes' or 'no'."
            },
            {
                "id": 12,
                "content": "Determine whether the given smart contract contains an Approval Not Cleared vulnerability. Respond with 'yes' or 'no' exclusively."
            },
            {
                "id": 13,
                "content": "Assess the smart contract for the presence of an Approval Not Cleared vulnerability. Your response should be limited to 'yes' or 'no'."
            },
            {
                "id": 14,
                "content": "Does the smart contract exhibit an Approval Not Cleared vulnerability? Please answer with only 'yes' or 'no'."
            },
            {
                "id": 15,
                "content": "Kindly review the smart contract for an Approval Not Cleared vulnerability. Provide a 'yes' or 'no' response only."
            },
            {
                "id": 16,
                "content": "Analyze the provided smart contract to determine if it has an Approval Not Cleared vulnerability. Answer with 'yes' or 'no'."
            },
            {
                "id": 17,
                "content": "Check if the smart contract below contains an Approval Not Cleared vulnerability. Respond with either 'yes' or 'no'."
            },
            {
                "id": 18,
                "content": "Examine the smart contract for an Approval Not Cleared vulnerability. Your answer should be 'yes' or 'no' only."
            },
            {
                "id": 19,
                "content": "Does the following smart contract have a Approval Not Cleared vulnerability? Answer only with 'yes' or 'no'."
            },
            {
                "id": 20,
                "content": "Plz check if the smart contract has an Approval Not Cleared vulnerability. Respond with 'yes' or 'no' only."
            }
        ],
        "fewShot": [
            {
                "id": 1,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nPlease answer: Does the following smart contract have an Approval Not Cleared vulnerability? Please answer only 'yes' or 'no'."
            },
            {
                "id": 2,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nKindly determine: Does the given smart contract contain an Approval Not Cleared vulnerability? Respond with 'yes' or 'no' only."
            },
            {
                "id": 3,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nBased on these examples, does the following smart contract have an Approval Not Cleared vulnerability? Answer 'yes' or 'no'."
            },
            {
                "id": 4,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nPlz answer: Does the folowing smart contract have an Approval Not Cleared vulnerability? Answer only 'yes' or 'no'."
            },
            {
                "id": 5,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nAnalyze the provided smart contract and determine if it has an Approval Not Cleared vulnerability. Respond with 'yes' or 'no'."
            },
            {
                "id": 6,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nDoes the smart contract below exhibit an Approval Not Cleared vulnerability? Answer with a simple 'yes' or 'no'."
            },
            {
                "id": 7,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nEvaluate the following smart contract for an Approval Not Cleared vulnerability. Provide only a 'yes' or 'no' answer."
            },
            {
                "id": 8,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nCheck if the smart contract has a Approval Not Cleared vulnerability. Respond with 'yes' or 'no' only."
            },
            {
                "id": 9,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nExamine the smart contract for an Approval Not Cleared vulnerability. Your answer should be either 'yes' or 'no'."
            },
            {
                "id": 10,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nIs there an Approval Not Cleared vulnerability in the following smart contract? Answer 'yes' or 'no'."
            },
            {
                "id": 11,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nPlz check if the smart contract has an Approval Not Cleared vulnerability. Only answer 'yes' or 'no'."
            },
            {
                "id": 12,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nDetermine whether the given smart contract contains an Approval Not Cleared vulnerability. Respond with 'yes' or 'no' exclusively."
            },
            {
                "id": 13,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nAssess the smart contract for the presence of an Approval Not Cleared vulnerability. Your response should be limited to 'yes' or 'no'."
            },
            {
                "id": 14,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nDoes the smart contract exhibit an Approval Not Cleared vulnerability? Please answer with only 'yes' or 'no'."
            },
            {
                "id": 15,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nKindly review the smart contract for an Approval Not Cleared vulnerability. Provide a 'yes' or 'no' response only."
            },
            {
                "id": 16,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nAnalyze the provided smart contract to determine if it has an Approval Not Cleared vulnerability. Answer with 'yes' or 'no'."
            },
            {
                "id": 17,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nCheck if the smart contract below contains an Approval Not Cleared vulnerability. Respond with either 'yes' or 'no'."
            },
            {
                "id": 18,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nExamine the smart contract for an Approval Not Cleared vulnerability. Your answer should be 'yes' or 'no' only."
            },
            {
                "id": 19,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nDoes the following smart contract have a Approval Not Cleared vulnerability? Answer only with 'yes' or 'no'."
            },
            {
                "id": 20,
                "content": "Example 1: \ncontract TokenWithApprovalNotCleared {\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract A have an Approval Not Cleared vulnerability?\nAnswer: yes\nEnd of Example 1.\nExample 2: \ncontract TokenWithApprovalCleared {\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        require(balances[from] >= value, \"Insufficient balance\");\n        \n        balances[from] -= value;\n        balances[to] += value;\n        allowance[from][msg.sender] = 0; // Clear approval\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n}\nQuestion: Does contract B have an Approval Not Cleared vulnerability?\nAnswer: no\nEnd of Example 2.\nPlz check if the smart contract has an Approval Not Cleared vulnerability. Respond with 'yes' or 'no' only."
            }
        ],
        "taskOriented": [
            {
                "id": 1,
                "content": "Task: Audit smart contract for Approval Not Cleared vulnerability\nInstructions:\n1. Check fund transfer operations in the contract\n2. Verify if approval is correctly cleared after the transaction\n3. If approval is correctly cleared, the vulnerability doesn't exist. Otherwise, it does.\n4. Answer only with 'yes' or 'no' to indicate if this vulnerability exists."
            },
            {
                "id": 2,
                "content": "Task: Evaluate smart contract for Approval Not Cleared vulnerability\nSteps:\n1. Examine fund transfer functions in the contract\n2. Confirm whether approval is properly reset post-transaction\n3. Determine vulnerability presence based on approval clearing\n4. Provide a 'yes' or 'no' response to indicate vulnerability existence."
            },
            {
                "id": 3,
                "content": "Task: Analyze smart contract for Approval Not Cleared vulnerability\nGuidelines:\n1. Review fund transfer mechanisms within the contract\n2. Assess if approval is adequately cleared following transactions\n3. Conclude vulnerability status based on approval clearing process\n4. Respond with 'yes' or 'no' to signify presence of vulnerability."
            },
            {
                "id": 4,
                "content": "Task: Inspect smart contract for Approval Not Cleared vulnerability\nProcedure:\n1. Scrutinize fund transfer operations in the contract\n2. Check if approval is appropriately nullified after transactions\n3. Deduce vulnerability existence based on approval clearing method\n4. Answer with 'yes' or 'no' to indicate if vulnerability is present."
            },
            {
                "id": 5,
                "content": "Task: Examine smart contract for Approval Not Cleared vulnerability\nDirections:\n1. Investigate fund transfer functions within the contract\n2. Verify whether approval is correctly reset post-transaction\n3. Determine vulnerability status based on approval clearing process\n4. Provide a 'yes' or 'no' response to indicate vulnerability presence."
            },
            {
                "id": 6,
                "content": "Task: Assess smart contract for Approval Not Cleared vulnerability\nSteps:\n1. Analyze fund transfer mechanisms in the contract\n2. Confirm if approval is properly cleared after transactions\n3. Conclude vulnerability existence based on approval resetting\n4. Respond with 'yes' or 'no' to signify presence of vulnerability."
            },
            {
                "id": 7,
                "content": "Task: Review smart contract for Approval Not Cleared vulnerability\nInstructions:\n1. Examine fund transfer operations within the contract\n2. Check if approval is adequately nullified post-transaction\n3. Determine vulnerability status based on approval clearing method\n4. Answer only with 'yes' or 'no' to indicate if vulnerability exists."
            },
            {
                "id": 8,
                "content": "Task: Evaluate smart contract for Approval Not Cleared vulnerability\nGuidelines:\n1. Scrutinize fund transfer functions in the contract\n2. Verify whether approval is correctly reset after transactions\n3. Deduce vulnerability presence based on approval clearing process\n4. Provide a 'yes' or 'no' response to indicate vulnerability existence."
            },
            {
                "id": 9,
                "content": "Task: Analyze smart contract for Approval Not Cleared vulnerability\nProcedure:\n1. Review fund transfer mechanisms within the contract\n2. Assess if approval is properly cleared following transactions\n3. Conclude vulnerability status based on approval resetting method\n4. Respond with 'yes' or 'no' to signify presence of vulnerability."
            },
            {
                "id": 10,
                "content": "Task: Inspect smart contract for Approval Not Cleared vulnerability\nDirections:\n1. Investigate fund transfer operations in the contract\n2. Check if approval is appropriately nullified after transactions\n3. Determine vulnerability existence based on approval clearing process\n4. Answer with 'yes' or 'no' to indicate if vulnerability is present."
            },
            {
                "id": 11,
                "content": "Task: Examine smart contract for Approval Not Cleared vulnerability\nSteps:\n1. Analyze fund transfer functions within the contract\n2. Confirm whether approval is correctly reset post-transaction\n3. Deduce vulnerability status based on approval clearing method\n4. Provide a 'yes' or 'no' response to indicate vulnerability presence."
            },
            {
                "id": 12,
                "content": "Task: Assess smart contract for Approval Not Cleared vulnerability\nInstructions:\n1. Scrutinize fund transfer mechanisms in the contract\n2. Verify if approval is adequately cleared after transactions\n3. Conclude vulnerability existence based on approval resetting\n4. Respond with 'yes' or 'no' to signify presence of vulnerability."
            },
            {
                "id": 13,
                "content": "Task: Review smart contract for Approval Not Cleared vulnerability\nGuidelines:\n1. Examine fund transfer operations within the contract\n2. Check whether approval is properly nullified post-transaction\n3. Determine vulnerability status based on approval clearing process\n4. Answer only with 'yes' or 'no' to indicate if vulnerability exists."
            },
            {
                "id": 14,
                "content": "Task: Evaluate smart contract for Approval Not Cleared vulnerability\nProcedure:\n1. Investigate fund transfer functions in the contract\n2. Assess if approval is correctly reset after transactions\n3. Deduce vulnerability presence based on approval clearing method\n4. Provide a 'yes' or 'no' response to indicate vulnerability existence."
            },
            {
                "id": 15,
                "content": "Task: Analyze smart contract for Approval Not Cleared vulnerability\nDirections:\n1. Review fund transfer mechanisms within the contract\n2. Confirm whether approval is appropriately cleared following transactions\n3. Conclude vulnerability status based on approval resetting process\n4. Respond with 'yes' or 'no' to signify presence of vulnerability."
            },
            {
                "id": 16,
                "content": "Task: Inspect smart contract for Approval Not Cleared vulnerability\nSteps:\n1. Scrutinize fund transfer operations in the contract\n2. Verify if approval is adequately nullified after transactions\n3. Determine vulnerability existence based on approval clearing method\n4. Answer with 'yes' or 'no' to indicate if vulnerability is present."
            },
            {
                "id": 17,
                "content": "Task: Examine smart contract for Approval Not Cleared vulnerability\nInstructions:\n1. Analyze fund transfer functions within the contract\n2. Check if approval is correctly reset post-transaction\n3. Deduce vulnerability status based on approval clearing process\n4. Provide a 'yes' or 'no' response to indicate vulnerability presence."
            },
            {
                "id": 18,
                "content": "Task: Assess smart contract for Approval Not Cleared vulnerability\nGuidelines:\n1. Investigate fund transfer mechanisms in the contract\n2. Confirm whether approval is properly cleared after transactions\n3. Conclude vulnerability existence based on approval resetting\n4. Respond with 'yes' or 'no' to signify presence of vulnerability."
            },
            {
                "id": 19,
                "content": "Task: Review smart contract for Approval Not Cleared vulnerability\nProcedure:\n1. Examine fund transfer operations within the contract\n2. Verify if approval is adequately nullified post-transaction\n3. Determine vulnerability status based on approval clearing method\n4. Answer only with 'yes' or 'no' to indicate if vulnerability exists."
            },
            {
                "id": 20,
                "content": "Task: Evaluate smart contract for Approval Not Cleared vulnerability\nDirections:\n1. Scrutinize fund transfer functions in the contract\n2. Assess whether approval is correctly reset after transactions\n3. Deduce vulnerability presence based on approval clearing process\n4. Provide a 'yes' or 'no' response to indicate vulnerability existence."
            }
        ],
        "roleOriented": [
            {
                "id": 1,
                "content": "As an experienced smart contract security auditor, please review the following contract for an Approval Not Cleared vulnerability. Answer only with 'yes' or 'no'."
            },
            {
                "id": 2,
                "content": "In your role as a blockchain security expert, examine the provided smart contract for an Approval Not Cleared vulnerability. Respond with either 'yes' or 'no'."
            },
            {
                "id": 3,
                "content": "Acting as a senior smart contract developer, analyze the given contract for the presence of an Approval Not Cleared vulnerability. Answer only 'yes' or 'no'."
            },
            {
                "id": 4,
                "content": "As a seasoned cryptocurrency security consultant, please assess the following smart contract for an Approval Not Cleared vulnerability. Provide a 'yes' or 'no' response."
            },
            {
                "id": 5,
                "content": "Taking on the role of a blockchain security auditor, review the provided smart contract for an Approval Not Cleared vulnerability. Answer with 'yes' or 'no' only."
            },
            {
                "id": 6,
                "content": "As an expert in smart contract vulnerabilities, examine the given contract for an Approval Not Cleared issue. Respond with either 'yes' or 'no'."
            },
            {
                "id": 7,
                "content": "In your capacity as a DeFi security specialist, analyze the following smart contract for an Approval Not Cleared vulnerability. Answer only with 'yes' or 'no'."
            },
            {
                "id": 8,
                "content": "As a professional smart contract auditor, please review the provided contract for an Approval Not Cleared vulnerability. Respond with 'yes' or 'no'."
            },
            {
                "id": 9,
                "content": "Taking the perspective of a blockchain security researcher, examine the given smart contract for an Approval Not Cleared vulnerability. Answer only 'yes' or 'no'."
            },
            {
                "id": 10,
                "content": "As an experienced Solidity developer, please assess the following contract for an Approval Not Cleared vulnerability. Provide a 'yes' or 'no' response."
            },
            {
                "id": 11,
                "content": "In your role as a cryptocurrency security analyst, review the provided smart contract for an Approval Not Cleared vulnerability. Answer with 'yes' or 'no' only."
            },
            {
                "id": 12,
                "content": "Acting as a blockchain security consultant, examine the given contract for the presence of an Approval Not Cleared vulnerability. Respond with either 'yes' or 'no'."
            },
            {
                "id": 13,
                "content": "As a smart contract security expert, analyze the following contract for an Approval Not Cleared vulnerability. Answer only with 'yes' or 'no'."
            },
            {
                "id": 14,
                "content": "Taking on the role of a DeFi protocol auditor, please review the provided smart contract for an Approval Not Cleared vulnerability. Respond with 'yes' or 'no'."
            },
            {
                "id": 15,
                "content": "As a blockchain security engineer, examine the given smart contract for an Approval Not Cleared vulnerability. Answer only 'yes' or 'no'."
            },
            {
                "id": 16,
                "content": "In your capacity as a smart contract vulnerability researcher, analyze the following contract for an Approval Not Cleared issue. Provide a 'yes' or 'no' response."
            },
            {
                "id": 17,
                "content": "As a professional in cryptocurrency security, please assess the provided smart contract for an Approval Not Cleared vulnerability. Answer with 'yes' or 'no' only."
            },
            {
                "id": 18,
                "content": "Taking the perspective of a Solidity security specialist, review the given contract for an Approval Not Cleared vulnerability. Respond with either 'yes' or 'no'."
            },
            {
                "id": 19,
                "content": "As an expert in blockchain security audits, examine the following smart contract for an Approval Not Cleared vulnerability. Answer only with 'yes' or 'no'."
            },
            {
                "id": 20,
                "content": "In your role as a DeFi security auditor, analyze the provided contract for the presence of an Approval Not Cleared vulnerability. Respond with 'yes' or 'no'."
            }
        ],
        "formal": [
            {
                "id": 1,
                "content": "Please conduct an Approval Not Cleared vulnerability analysis on the smart contract in the attachment. Respond only with 'yes' or 'no' to indicate the presence of this vulnerability."
            },
            {
                "id": 2,
                "content": "Kindly perform an assessment of the attached smart contract to determine the existence of an Approval Not Cleared vulnerability. Provide a response of either 'yes' or 'no'."
            },
            {
                "id": 3,
                "content": "We request that you evaluate the enclosed smart contract for the presence of an Approval Not Cleared vulnerability. Please respond with 'yes' or 'no' to indicate your findings."
            },
            {
                "id": 4,
                "content": "Your expertise is required to analyze the provided smart contract for an Approval Not Cleared vulnerability. Kindly respond with 'yes' or 'no' to signify the presence or absence of this vulnerability."
            },
            {
                "id": 5,
                "content": "We kindly ask you to examine the attached smart contract and determine if an Approval Not Cleared vulnerability exists. Please provide your conclusion as either 'yes' or 'no'."
            },
            {
                "id": 6,
                "content": "Please undertake an analysis of the enclosed smart contract to identify any Approval Not Cleared vulnerabilities. Respond solely with 'yes' or 'no' to indicate your findings."
            },
            {
                "id": 7,
                "content": "We request your assistance in evaluating the provided smart contract for the presence of an Approval Not Cleared vulnerability. Kindly respond with either 'yes' or 'no'."
            },
            {
                "id": 8,
                "content": "Your assessment is required to determine if the attached smart contract contains an Approval Not Cleared vulnerability. Please provide a 'yes' or 'no' response to indicate your conclusion."
            },
            {
                "id": 9,
                "content": "We kindly ask you to conduct an examination of the enclosed smart contract for any Approval Not Cleared vulnerabilities. Respond only with 'yes' or 'no' to signify your findings."
            },
            {
                "id": 10,
                "content": "Please perform an analysis of the provided smart contract to identify the presence of an Approval Not Cleared vulnerability. Kindly respond with 'yes' or 'no' to indicate your determination."
            },
            {
                "id": 11,
                "content": "Your expertise is sought to evaluate the attached smart contract for an Approval Not Cleared vulnerability. Please provide your conclusion as either 'yes' or 'no'."
            },
            {
                "id": 12,
                "content": "We request that you assess the enclosed smart contract to determine if an Approval Not Cleared vulnerability exists. Kindly respond with 'yes' or 'no' to signify your findings."
            },
            {
                "id": 13,
                "content": "Please undertake an examination of the provided smart contract for the presence of an Approval Not Cleared vulnerability. Respond solely with 'yes' or 'no' to indicate your conclusion."
            },
            {
                "id": 14,
                "content": "Your analysis is required to evaluate the attached smart contract and identify any Approval Not Cleared vulnerabilities. Kindly provide a 'yes' or 'no' response to indicate your determination."
            },
            {
                "id": 15,
                "content": "We kindly request your assistance in examining the enclosed smart contract for an Approval Not Cleared vulnerability. Please respond with either 'yes' or 'no' to signify your findings."
            },
            {
                "id": 16,
                "content": "Please conduct an assessment of the provided smart contract to determine the existence of an Approval Not Cleared vulnerability. Respond only with 'yes' or 'no' to indicate your conclusion."
            },
            {
                "id": 17,
                "content": "Your expertise is required to analyze the attached smart contract for the presence of an Approval Not Cleared vulnerability. Kindly provide a 'yes' or 'no' response to signify your findings."
            },
            {
                "id": 18,
                "content": "We request that you evaluate the enclosed smart contract to identify any Approval Not Cleared vulnerabilities. Please respond with 'yes' or 'no' to indicate your determination."
            },
            {
                "id": 19,
                "content": "Please undertake an examination of the provided smart contract for an Approval Not Cleared vulnerability. Kindly respond with either 'yes' or 'no' to signify your conclusion."
            },
            {
                "id": 20,
                "content": "Your assessment is sought to determine if the attached smart contract contains an Approval Not Cleared vulnerability. Please provide a 'yes' or 'no' response to indicate your findings."
            }
        ],
        "informal": [
            {
                "id": 1,
                "content": "Hey, can you check if this smart contract has an Approval Not Cleared bug? Just reply with 'yes' or 'no', thanks!"
            },
            {
                "id": 2,
                "content": "Yo! Mind taking a look at this smart contract for an Approval Not Cleared issue? Hit me back with a 'yes' or 'no'!"
            },
            {
                "id": 3,
                "content": "Hey there! Could you give this smart contract a once-over for an Approval Not Cleared problem? Just need a 'yes' or 'no' answer!"
            },
            {
                "id": 4,
                "content": "Hi! Can you spot any Approval Not Cleared bugs in this smart contract? Just a quick 'yes' or 'no' will do!"
            },
            {
                "id": 5,
                "content": "Hey buddy, mind checking this smart contract for an Approval Not Cleared vulnerability? Just say 'yes' or 'no'!"
            },
            {
                "id": 6,
                "content": "Sup! Can you take a peek at this smart contract and see if it's got an Approval Not Cleared issue? 'Yes' or 'no' is all I need!"
            },
            {
                "id": 7,
                "content": "Heya! Would you mind giving this smart contract a quick look for an Approval Not Cleared bug? Just need a 'yes' or 'no'!"
            },
            {
                "id": 8,
                "content": "Hi there! Can you check out this smart contract for an Approval Not Cleared problem? Just hit me with a 'yes' or 'no'!"
            },
            {
                "id": 9,
                "content": "Hey! Got a sec to look at this smart contract for an Approval Not Cleared vulnerability? Just need a 'yes' or 'no' answer!"
            },
            {
                "id": 10,
                "content": "Yo, what's up! Mind giving this smart contract a quick scan for an Approval Not Cleared issue? Just a 'yes' or 'no' will do!"
            },
            {
                "id": 11,
                "content": "Hey there! Can you take a quick look at this smart contract for an Approval Not Cleared bug? Just need a 'yes' or 'no'!"
            },
            {
                "id": 12,
                "content": "Hi! Would you mind checking if this smart contract has an Approval Not Cleared vulnerability? Just say 'yes' or 'no'!"
            },
            {
                "id": 13,
                "content": "Heya! Can you give this smart contract a once-over for an Approval Not Cleared issue? Just need a 'yes' or 'no' answer!"
            },
            {
                "id": 14,
                "content": "Sup! Mind taking a look at this smart contract for an Approval Not Cleared problem? Hit me back with a 'yes' or 'no'!"
            },
            {
                "id": 15,
                "content": "Hey buddy! Could you check out this smart contract for an Approval Not Cleared vulnerability? Just a quick 'yes' or 'no' will do!"
            },
            {
                "id": 16,
                "content": "Hi there! Got a moment to scan this smart contract for an Approval Not Cleared bug? Just need a 'yes' or 'no'!"
            },
            {
                "id": 17,
                "content": "Hey! Can you take a peek at this smart contract and see if it's got an Approval Not Cleared issue? 'Yes' or 'no' is all I need!"
            },
            {
                "id": 18,
                "content": "Yo! Mind giving this smart contract a quick look for an Approval Not Cleared vulnerability? Just say 'yes' or 'no'!"
            },
            {
                "id": 19,
                "content": "Heya! Would you mind checking if this smart contract has an Approval Not Cleared bug? Just need a 'yes' or 'no' answer!"
            },
            {
                "id": 20,
                "content": "Hi! Can you spot any Approval Not Cleared issues in this smart contract? Just a quick 'yes' or 'no' will do!"
            }
        ]
    }
}