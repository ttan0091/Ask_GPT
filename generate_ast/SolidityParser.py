# Generated from Solidity.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,122,973,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,1,
        0,1,0,1,0,5,0,174,8,0,10,0,12,0,177,9,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,2,1,2,1,3,1,3,3,3,190,8,3,1,4,1,4,3,4,194,8,4,1,5,1,5,1,6,
        3,6,199,8,6,1,6,1,6,1,7,1,7,1,7,3,7,206,8,7,1,8,1,8,1,8,1,8,3,8,
        212,8,8,1,8,1,8,1,8,1,8,3,8,218,8,8,1,8,1,8,3,8,222,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,5,8,232,8,8,10,8,12,8,235,9,8,1,8,1,8,1,
        8,1,8,1,8,3,8,242,8,8,1,9,1,9,1,10,3,10,247,8,10,1,10,1,10,1,10,
        1,10,1,10,1,10,5,10,255,8,10,10,10,12,10,258,9,10,3,10,260,8,10,
        1,10,1,10,5,10,264,8,10,10,10,12,10,267,9,10,1,10,1,10,1,11,1,11,
        1,11,3,11,274,8,11,1,11,3,11,277,8,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,3,12,287,8,12,1,13,1,13,5,13,291,8,13,10,13,12,13,294,
        9,13,1,13,1,13,1,13,3,13,299,8,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,3,14,308,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,5,15,320,8,15,10,15,12,15,323,9,15,3,15,325,8,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,3,17,337,8,17,1,17,1,17,
        1,18,1,18,1,18,3,18,344,8,18,1,18,3,18,347,8,18,1,19,3,19,350,8,
        19,1,19,1,19,3,19,354,8,19,1,19,1,19,1,19,3,19,359,8,19,1,19,1,19,
        3,19,363,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,
        374,8,21,10,21,12,21,377,9,21,1,22,3,22,380,8,22,1,22,1,22,1,22,
        1,22,3,22,386,8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,
        396,8,24,1,24,1,24,5,24,400,8,24,10,24,12,24,403,9,24,1,24,1,24,
        1,25,1,25,1,25,1,25,5,25,411,8,25,10,25,12,25,414,9,25,3,25,416,
        8,25,1,25,1,25,1,26,1,26,3,26,422,8,26,1,26,3,26,425,8,26,1,27,1,
        27,1,27,1,27,5,27,431,8,27,10,27,12,27,434,9,27,3,27,436,8,27,1,
        27,1,27,1,28,1,28,3,28,442,8,28,1,28,3,28,445,8,28,1,29,1,29,1,29,
        1,29,5,29,451,8,29,10,29,12,29,454,9,29,3,29,456,8,29,1,29,1,29,
        1,30,1,30,3,30,462,8,30,1,31,1,31,3,31,466,8,31,1,31,1,31,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,3,32,477,8,32,1,32,1,32,1,32,3,32,482,
        8,32,1,32,5,32,485,8,32,10,32,12,32,488,9,32,1,33,1,33,1,33,5,33,
        493,8,33,10,33,12,33,496,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,35,1,35,1,35,1,35,1,35,5,35,510,8,35,10,35,12,35,513,9,35,1,35,
        1,35,3,35,517,8,35,1,36,1,36,1,37,1,37,1,38,1,38,5,38,525,8,38,10,
        38,12,38,528,9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,3,39,544,8,39,1,40,1,40,1,40,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,3,41,556,8,41,1,42,1,42,1,42,1,42,1,42,1,
        42,1,43,1,43,3,43,566,8,43,1,44,1,44,1,44,1,44,3,44,572,8,44,1,44,
        1,44,3,44,576,8,44,1,44,3,44,579,8,44,1,44,1,44,1,44,1,45,1,45,3,
        45,586,8,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,3,49,606,8,49,1,49,1,49,1,
        50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,3,52,624,8,52,1,52,1,52,3,52,628,8,52,1,52,1,52,1,53,3,53,633,
        8,53,1,53,1,53,3,53,637,8,53,5,53,639,8,53,10,53,12,53,642,9,53,
        1,54,1,54,3,54,646,8,54,1,54,5,54,649,8,54,10,54,12,54,652,9,54,
        1,54,3,54,655,8,54,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        3,56,679,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,738,8,56,10,56,12,56,
        741,9,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,750,8,57,1,57,1,
        57,1,57,1,57,1,57,3,57,757,8,57,3,57,759,8,57,1,58,1,58,1,58,5,58,
        764,8,58,10,58,12,58,767,9,58,1,59,1,59,1,59,5,59,772,8,59,10,59,
        12,59,775,9,59,1,59,3,59,778,8,59,1,60,1,60,1,60,1,60,1,61,1,61,
        3,61,786,8,61,1,61,1,61,3,61,790,8,61,3,61,792,8,61,1,62,1,62,1,
        62,1,62,1,62,1,63,1,63,5,63,801,8,63,10,63,12,63,804,9,63,1,63,1,
        63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,3,64,825,8,64,1,65,1,65,3,65,829,8,65,1,66,
        1,66,1,66,1,66,3,66,835,8,66,1,66,1,66,3,66,839,8,66,1,66,1,66,5,
        66,843,8,66,10,66,12,66,846,9,66,1,66,3,66,849,8,66,1,67,1,67,1,
        67,1,67,3,67,855,8,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,
        69,3,69,866,8,69,1,70,1,70,1,70,5,70,871,8,70,10,70,12,70,874,9,
        70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,5,73,885,8,73,10,
        73,12,73,888,9,73,1,74,1,74,1,74,1,74,1,74,1,74,3,74,896,8,74,1,
        75,1,75,1,75,1,75,3,75,902,8,75,1,75,1,75,3,75,906,8,75,1,75,1,75,
        1,76,1,76,1,76,1,77,1,77,1,77,3,77,916,8,77,1,77,1,77,1,77,3,77,
        921,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,79,1,80,1,80,1,80,
        1,80,1,81,1,81,3,81,937,8,81,1,81,1,81,3,81,941,8,81,5,81,943,8,
        81,10,81,12,81,946,9,81,1,81,1,81,1,81,1,81,1,81,5,81,953,8,81,10,
        81,12,81,956,9,81,3,81,958,8,81,1,81,3,81,961,8,81,1,82,1,82,3,82,
        965,8,82,1,83,1,83,3,83,969,8,83,1,84,1,84,1,84,0,2,64,112,85,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,0,18,1,0,3,9,1,0,91,92,1,0,17,19,3,0,107,
        107,111,111,113,114,1,0,38,40,4,0,107,107,112,112,115,115,117,117,
        3,0,34,34,49,52,93,97,1,0,53,54,1,0,56,57,1,0,58,59,2,0,12,12,62,
        63,1,0,64,65,1,0,5,8,1,0,68,69,2,0,9,9,74,83,3,0,100,101,103,103,
        119,119,1,0,100,101,3,0,13,13,40,40,118,118,1066,0,175,1,0,0,0,2,
        180,1,0,0,0,4,185,1,0,0,0,6,189,1,0,0,0,8,191,1,0,0,0,10,195,1,0,
        0,0,12,198,1,0,0,0,14,202,1,0,0,0,16,241,1,0,0,0,18,243,1,0,0,0,
        20,246,1,0,0,0,22,270,1,0,0,0,24,286,1,0,0,0,26,288,1,0,0,0,28,302,
        1,0,0,0,30,311,1,0,0,0,32,328,1,0,0,0,34,333,1,0,0,0,36,340,1,0,
        0,0,38,349,1,0,0,0,40,364,1,0,0,0,42,375,1,0,0,0,44,379,1,0,0,0,
        46,389,1,0,0,0,48,391,1,0,0,0,50,406,1,0,0,0,52,419,1,0,0,0,54,426,
        1,0,0,0,56,439,1,0,0,0,58,446,1,0,0,0,60,459,1,0,0,0,62,463,1,0,
        0,0,64,476,1,0,0,0,66,489,1,0,0,0,68,497,1,0,0,0,70,504,1,0,0,0,
        72,518,1,0,0,0,74,520,1,0,0,0,76,522,1,0,0,0,78,543,1,0,0,0,80,545,
        1,0,0,0,82,548,1,0,0,0,84,557,1,0,0,0,86,565,1,0,0,0,88,567,1,0,
        0,0,90,583,1,0,0,0,92,589,1,0,0,0,94,597,1,0,0,0,96,600,1,0,0,0,
        98,603,1,0,0,0,100,609,1,0,0,0,102,612,1,0,0,0,104,623,1,0,0,0,106,
        632,1,0,0,0,108,643,1,0,0,0,110,658,1,0,0,0,112,678,1,0,0,0,114,
        758,1,0,0,0,116,760,1,0,0,0,118,768,1,0,0,0,120,779,1,0,0,0,122,
        791,1,0,0,0,124,793,1,0,0,0,126,798,1,0,0,0,128,824,1,0,0,0,130,
        828,1,0,0,0,132,834,1,0,0,0,134,850,1,0,0,0,136,856,1,0,0,0,138,
        865,1,0,0,0,140,867,1,0,0,0,142,875,1,0,0,0,144,878,1,0,0,0,146,
        881,1,0,0,0,148,895,1,0,0,0,150,897,1,0,0,0,152,909,1,0,0,0,154,
        912,1,0,0,0,156,924,1,0,0,0,158,928,1,0,0,0,160,930,1,0,0,0,162,
        960,1,0,0,0,164,964,1,0,0,0,166,966,1,0,0,0,168,970,1,0,0,0,170,
        174,3,2,1,0,171,174,3,16,8,0,172,174,3,20,10,0,173,170,1,0,0,0,173,
        171,1,0,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,
        176,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,0,178,179,5,0,0,1,179,
        1,1,0,0,0,180,181,5,1,0,0,181,182,3,4,2,0,182,183,3,6,3,0,183,184,
        5,2,0,0,184,3,1,0,0,0,185,186,3,168,84,0,186,5,1,0,0,0,187,190,3,
        8,4,0,188,190,3,112,56,0,189,187,1,0,0,0,189,188,1,0,0,0,190,7,1,
        0,0,0,191,193,3,12,6,0,192,194,3,12,6,0,193,192,1,0,0,0,193,194,
        1,0,0,0,194,9,1,0,0,0,195,196,7,0,0,0,196,11,1,0,0,0,197,199,3,10,
        5,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,201,5,98,
        0,0,201,13,1,0,0,0,202,205,3,168,84,0,203,204,5,10,0,0,204,206,3,
        168,84,0,205,203,1,0,0,0,205,206,1,0,0,0,206,15,1,0,0,0,207,208,
        5,11,0,0,208,211,5,119,0,0,209,210,5,10,0,0,210,212,3,168,84,0,211,
        209,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,242,5,2,0,0,214,
        217,5,11,0,0,215,218,5,12,0,0,216,218,3,168,84,0,217,215,1,0,0,0,
        217,216,1,0,0,0,218,221,1,0,0,0,219,220,5,10,0,0,220,222,3,168,84,
        0,221,219,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,13,0,
        0,224,225,5,119,0,0,225,242,5,2,0,0,226,227,5,11,0,0,227,228,5,14,
        0,0,228,233,3,14,7,0,229,230,5,15,0,0,230,232,3,14,7,0,231,229,1,
        0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,
        0,0,0,235,233,1,0,0,0,236,237,5,16,0,0,237,238,5,13,0,0,238,239,
        5,119,0,0,239,240,5,2,0,0,240,242,1,0,0,0,241,207,1,0,0,0,241,214,
        1,0,0,0,241,226,1,0,0,0,242,17,1,0,0,0,243,244,7,1,0,0,244,19,1,
        0,0,0,245,247,3,18,9,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,
        0,0,0,248,249,7,2,0,0,249,259,3,168,84,0,250,251,5,20,0,0,251,256,
        3,22,11,0,252,253,5,15,0,0,253,255,3,22,11,0,254,252,1,0,0,0,255,
        258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,260,1,0,0,0,258,
        256,1,0,0,0,259,250,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,
        265,5,14,0,0,262,264,3,24,12,0,263,262,1,0,0,0,264,267,1,0,0,0,265,
        263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,
        269,5,16,0,0,269,21,1,0,0,0,270,276,3,66,33,0,271,273,5,21,0,0,272,
        274,3,116,58,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,
        277,5,22,0,0,276,271,1,0,0,0,276,277,1,0,0,0,277,23,1,0,0,0,278,
        287,3,26,13,0,279,287,3,28,14,0,280,287,3,30,15,0,281,287,3,32,16,
        0,282,287,3,34,17,0,283,287,3,38,19,0,284,287,3,44,22,0,285,287,
        3,48,24,0,286,278,1,0,0,0,286,279,1,0,0,0,286,280,1,0,0,0,286,281,
        1,0,0,0,286,282,1,0,0,0,286,283,1,0,0,0,286,284,1,0,0,0,286,285,
        1,0,0,0,287,25,1,0,0,0,288,292,3,64,32,0,289,291,7,3,0,0,290,289,
        1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,295,
        1,0,0,0,294,292,1,0,0,0,295,298,3,168,84,0,296,297,5,9,0,0,297,299,
        3,112,56,0,298,296,1,0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,301,
        5,2,0,0,301,27,1,0,0,0,302,303,5,23,0,0,303,304,3,168,84,0,304,307,
        5,24,0,0,305,308,5,12,0,0,306,308,3,64,32,0,307,305,1,0,0,0,307,
        306,1,0,0,0,308,309,1,0,0,0,309,310,5,2,0,0,310,29,1,0,0,0,311,312,
        5,25,0,0,312,313,3,168,84,0,313,324,5,14,0,0,314,315,3,62,31,0,315,
        321,5,2,0,0,316,317,3,62,31,0,317,318,5,2,0,0,318,320,1,0,0,0,319,
        316,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
        325,1,0,0,0,323,321,1,0,0,0,324,314,1,0,0,0,324,325,1,0,0,0,325,
        326,1,0,0,0,326,327,5,16,0,0,327,31,1,0,0,0,328,329,5,26,0,0,329,
        330,3,50,25,0,330,331,3,42,21,0,331,332,3,76,38,0,332,33,1,0,0,0,
        333,334,5,27,0,0,334,336,3,168,84,0,335,337,3,50,25,0,336,335,1,
        0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,339,3,76,38,0,339,35,1,
        0,0,0,340,346,3,168,84,0,341,343,5,21,0,0,342,344,3,116,58,0,343,
        342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,347,5,22,0,0,346,
        341,1,0,0,0,346,347,1,0,0,0,347,37,1,0,0,0,348,350,3,18,9,0,349,
        348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,353,5,28,0,0,352,
        354,3,168,84,0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,
        356,3,50,25,0,356,358,3,42,21,0,357,359,3,40,20,0,358,357,1,0,0,
        0,358,359,1,0,0,0,359,362,1,0,0,0,360,363,5,2,0,0,361,363,3,76,38,
        0,362,360,1,0,0,0,362,361,1,0,0,0,363,39,1,0,0,0,364,365,5,29,0,
        0,365,366,3,50,25,0,366,41,1,0,0,0,367,374,3,36,18,0,368,374,3,74,
        37,0,369,374,5,109,0,0,370,374,5,114,0,0,371,374,5,111,0,0,372,374,
        5,113,0,0,373,367,1,0,0,0,373,368,1,0,0,0,373,369,1,0,0,0,373,370,
        1,0,0,0,373,371,1,0,0,0,373,372,1,0,0,0,374,377,1,0,0,0,375,373,
        1,0,0,0,375,376,1,0,0,0,376,43,1,0,0,0,377,375,1,0,0,0,378,380,3,
        18,9,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,5,
        30,0,0,382,383,3,168,84,0,383,385,3,54,27,0,384,386,5,105,0,0,385,
        384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,5,2,0,0,388,
        45,1,0,0,0,389,390,3,168,84,0,390,47,1,0,0,0,391,392,5,31,0,0,392,
        393,3,168,84,0,393,395,5,14,0,0,394,396,3,46,23,0,395,394,1,0,0,
        0,395,396,1,0,0,0,396,401,1,0,0,0,397,398,5,15,0,0,398,400,3,46,
        23,0,399,397,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,
        0,0,402,404,1,0,0,0,403,401,1,0,0,0,404,405,5,16,0,0,405,49,1,0,
        0,0,406,415,5,21,0,0,407,412,3,52,26,0,408,409,5,15,0,0,409,411,
        3,52,26,0,410,408,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,
        1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,415,407,1,0,0,0,415,416,
        1,0,0,0,416,417,1,0,0,0,417,418,5,22,0,0,418,51,1,0,0,0,419,421,
        3,64,32,0,420,422,3,72,36,0,421,420,1,0,0,0,421,422,1,0,0,0,422,
        424,1,0,0,0,423,425,3,168,84,0,424,423,1,0,0,0,424,425,1,0,0,0,425,
        53,1,0,0,0,426,435,5,21,0,0,427,432,3,56,28,0,428,429,5,15,0,0,429,
        431,3,56,28,0,430,428,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,0,432,
        433,1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,435,427,1,0,0,0,435,
        436,1,0,0,0,436,437,1,0,0,0,437,438,5,22,0,0,438,55,1,0,0,0,439,
        441,3,64,32,0,440,442,5,110,0,0,441,440,1,0,0,0,441,442,1,0,0,0,
        442,444,1,0,0,0,443,445,3,168,84,0,444,443,1,0,0,0,444,445,1,0,0,
        0,445,57,1,0,0,0,446,455,5,21,0,0,447,452,3,60,30,0,448,449,5,15,
        0,0,449,451,3,60,30,0,450,448,1,0,0,0,451,454,1,0,0,0,452,450,1,
        0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,455,447,1,
        0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,5,22,0,0,458,59,1,
        0,0,0,459,461,3,64,32,0,460,462,3,72,36,0,461,460,1,0,0,0,461,462,
        1,0,0,0,462,61,1,0,0,0,463,465,3,64,32,0,464,466,3,72,36,0,465,464,
        1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,3,168,84,0,468,63,
        1,0,0,0,469,470,6,32,-1,0,470,477,3,110,55,0,471,477,3,66,33,0,472,
        477,3,68,34,0,473,477,3,70,35,0,474,475,5,34,0,0,475,477,5,112,0,
        0,476,469,1,0,0,0,476,471,1,0,0,0,476,472,1,0,0,0,476,473,1,0,0,
        0,476,474,1,0,0,0,477,486,1,0,0,0,478,479,10,3,0,0,479,481,5,32,
        0,0,480,482,3,112,56,0,481,480,1,0,0,0,481,482,1,0,0,0,482,483,1,
        0,0,0,483,485,5,33,0,0,484,478,1,0,0,0,485,488,1,0,0,0,486,484,1,
        0,0,0,486,487,1,0,0,0,487,65,1,0,0,0,488,486,1,0,0,0,489,494,3,168,
        84,0,490,491,5,35,0,0,491,493,3,168,84,0,492,490,1,0,0,0,493,496,
        1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,67,1,0,0,0,496,494,1,
        0,0,0,497,498,5,36,0,0,498,499,5,21,0,0,499,500,3,110,55,0,500,501,
        5,37,0,0,501,502,3,64,32,0,502,503,5,22,0,0,503,69,1,0,0,0,504,505,
        5,28,0,0,505,511,3,58,29,0,506,510,5,111,0,0,507,510,5,109,0,0,508,
        510,3,74,37,0,509,506,1,0,0,0,509,507,1,0,0,0,509,508,1,0,0,0,510,
        513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,516,1,0,0,0,513,
        511,1,0,0,0,514,515,5,29,0,0,515,517,3,58,29,0,516,514,1,0,0,0,516,
        517,1,0,0,0,517,71,1,0,0,0,518,519,7,4,0,0,519,73,1,0,0,0,520,521,
        7,5,0,0,521,75,1,0,0,0,522,526,5,14,0,0,523,525,3,78,39,0,524,523,
        1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,529,
        1,0,0,0,528,526,1,0,0,0,529,530,5,16,0,0,530,77,1,0,0,0,531,544,
        3,82,41,0,532,544,3,84,42,0,533,544,3,88,44,0,534,544,3,76,38,0,
        535,544,3,90,45,0,536,544,3,92,46,0,537,544,3,94,47,0,538,544,3,
        96,48,0,539,544,3,98,49,0,540,544,3,100,50,0,541,544,3,102,51,0,
        542,544,3,86,43,0,543,531,1,0,0,0,543,532,1,0,0,0,543,533,1,0,0,
        0,543,534,1,0,0,0,543,535,1,0,0,0,543,536,1,0,0,0,543,537,1,0,0,
        0,543,538,1,0,0,0,543,539,1,0,0,0,543,540,1,0,0,0,543,541,1,0,0,
        0,543,542,1,0,0,0,544,79,1,0,0,0,545,546,3,112,56,0,546,547,5,2,
        0,0,547,81,1,0,0,0,548,549,5,41,0,0,549,550,5,21,0,0,550,551,3,112,
        56,0,551,552,5,22,0,0,552,555,3,78,39,0,553,554,5,42,0,0,554,556,
        3,78,39,0,555,553,1,0,0,0,555,556,1,0,0,0,556,83,1,0,0,0,557,558,
        5,43,0,0,558,559,5,21,0,0,559,560,3,112,56,0,560,561,5,22,0,0,561,
        562,3,78,39,0,562,85,1,0,0,0,563,566,3,104,52,0,564,566,3,80,40,
        0,565,563,1,0,0,0,565,564,1,0,0,0,566,87,1,0,0,0,567,568,5,24,0,
        0,568,571,5,21,0,0,569,572,3,86,43,0,570,572,5,2,0,0,571,569,1,0,
        0,0,571,570,1,0,0,0,572,575,1,0,0,0,573,576,3,80,40,0,574,576,5,
        2,0,0,575,573,1,0,0,0,575,574,1,0,0,0,576,578,1,0,0,0,577,579,3,
        112,56,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,
        5,22,0,0,581,582,3,78,39,0,582,89,1,0,0,0,583,585,5,44,0,0,584,586,
        5,119,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,
        3,126,63,0,588,91,1,0,0,0,589,590,5,45,0,0,590,591,3,78,39,0,591,
        592,5,43,0,0,592,593,5,21,0,0,593,594,3,112,56,0,594,595,5,22,0,
        0,595,596,5,2,0,0,596,93,1,0,0,0,597,598,5,108,0,0,598,599,5,2,0,
        0,599,95,1,0,0,0,600,601,5,106,0,0,601,602,5,2,0,0,602,97,1,0,0,
        0,603,605,5,46,0,0,604,606,3,112,56,0,605,604,1,0,0,0,605,606,1,
        0,0,0,606,607,1,0,0,0,607,608,5,2,0,0,608,99,1,0,0,0,609,610,5,47,
        0,0,610,611,5,2,0,0,611,101,1,0,0,0,612,613,5,48,0,0,613,614,3,124,
        62,0,614,615,5,2,0,0,615,103,1,0,0,0,616,617,5,49,0,0,617,624,3,
        108,54,0,618,624,3,62,31,0,619,620,5,21,0,0,620,621,3,106,53,0,621,
        622,5,22,0,0,622,624,1,0,0,0,623,616,1,0,0,0,623,618,1,0,0,0,623,
        619,1,0,0,0,624,627,1,0,0,0,625,626,5,9,0,0,626,628,3,112,56,0,627,
        625,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,5,2,0,0,630,
        105,1,0,0,0,631,633,3,62,31,0,632,631,1,0,0,0,632,633,1,0,0,0,633,
        640,1,0,0,0,634,636,5,15,0,0,635,637,3,62,31,0,636,635,1,0,0,0,636,
        637,1,0,0,0,637,639,1,0,0,0,638,634,1,0,0,0,639,642,1,0,0,0,640,
        638,1,0,0,0,640,641,1,0,0,0,641,107,1,0,0,0,642,640,1,0,0,0,643,
        650,5,21,0,0,644,646,3,168,84,0,645,644,1,0,0,0,645,646,1,0,0,0,
        646,647,1,0,0,0,647,649,5,15,0,0,648,645,1,0,0,0,649,652,1,0,0,0,
        650,648,1,0,0,0,650,651,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,
        653,655,3,168,84,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,
        0,656,657,5,22,0,0,657,109,1,0,0,0,658,659,7,6,0,0,659,111,1,0,0,
        0,660,661,6,56,-1,0,661,662,5,55,0,0,662,679,3,64,32,0,663,664,5,
        21,0,0,664,665,3,112,56,0,665,666,5,22,0,0,666,679,1,0,0,0,667,668,
        7,7,0,0,668,679,3,112,56,19,669,670,7,8,0,0,670,679,3,112,56,18,
        671,672,7,9,0,0,672,679,3,112,56,17,673,674,5,60,0,0,674,679,3,112,
        56,16,675,676,5,4,0,0,676,679,3,112,56,15,677,679,3,114,57,0,678,
        660,1,0,0,0,678,663,1,0,0,0,678,667,1,0,0,0,678,669,1,0,0,0,678,
        671,1,0,0,0,678,673,1,0,0,0,678,675,1,0,0,0,678,677,1,0,0,0,679,
        739,1,0,0,0,680,681,10,14,0,0,681,682,5,61,0,0,682,738,3,112,56,
        15,683,684,10,13,0,0,684,685,7,10,0,0,685,738,3,112,56,14,686,687,
        10,12,0,0,687,688,7,8,0,0,688,738,3,112,56,13,689,690,10,11,0,0,
        690,691,7,11,0,0,691,738,3,112,56,12,692,693,10,10,0,0,693,694,5,
        66,0,0,694,738,3,112,56,11,695,696,10,9,0,0,696,697,5,3,0,0,697,
        738,3,112,56,10,698,699,10,8,0,0,699,700,5,67,0,0,700,738,3,112,
        56,9,701,702,10,7,0,0,702,703,7,12,0,0,703,738,3,112,56,8,704,705,
        10,6,0,0,705,706,7,13,0,0,706,738,3,112,56,7,707,708,10,5,0,0,708,
        709,5,70,0,0,709,738,3,112,56,6,710,711,10,4,0,0,711,712,5,71,0,
        0,712,738,3,112,56,5,713,714,10,3,0,0,714,715,5,72,0,0,715,716,3,
        112,56,0,716,717,5,73,0,0,717,718,3,112,56,4,718,738,1,0,0,0,719,
        720,10,2,0,0,720,721,7,14,0,0,721,738,3,112,56,3,722,723,10,25,0,
        0,723,738,7,7,0,0,724,725,10,23,0,0,725,726,5,32,0,0,726,727,3,112,
        56,0,727,728,5,33,0,0,728,738,1,0,0,0,729,730,10,22,0,0,730,731,
        5,21,0,0,731,732,3,122,61,0,732,733,5,22,0,0,733,738,1,0,0,0,734,
        735,10,21,0,0,735,736,5,35,0,0,736,738,3,168,84,0,737,680,1,0,0,
        0,737,683,1,0,0,0,737,686,1,0,0,0,737,689,1,0,0,0,737,692,1,0,0,
        0,737,695,1,0,0,0,737,698,1,0,0,0,737,701,1,0,0,0,737,704,1,0,0,
        0,737,707,1,0,0,0,737,710,1,0,0,0,737,713,1,0,0,0,737,719,1,0,0,
        0,737,722,1,0,0,0,737,724,1,0,0,0,737,729,1,0,0,0,737,734,1,0,0,
        0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,113,1,0,0,
        0,741,739,1,0,0,0,742,759,5,99,0,0,743,759,3,166,83,0,744,759,5,
        103,0,0,745,759,5,119,0,0,746,749,3,168,84,0,747,748,5,32,0,0,748,
        750,5,33,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,759,1,0,0,0,751,
        759,5,116,0,0,752,759,3,162,81,0,753,756,3,164,82,0,754,755,5,32,
        0,0,755,757,5,33,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,759,1,0,
        0,0,758,742,1,0,0,0,758,743,1,0,0,0,758,744,1,0,0,0,758,745,1,0,
        0,0,758,746,1,0,0,0,758,751,1,0,0,0,758,752,1,0,0,0,758,753,1,0,
        0,0,759,115,1,0,0,0,760,765,3,112,56,0,761,762,5,15,0,0,762,764,
        3,112,56,0,763,761,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,
        1,0,0,0,766,117,1,0,0,0,767,765,1,0,0,0,768,773,3,120,60,0,769,770,
        5,15,0,0,770,772,3,120,60,0,771,769,1,0,0,0,772,775,1,0,0,0,773,
        771,1,0,0,0,773,774,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,776,
        778,5,15,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,119,1,0,0,0,779,
        780,3,168,84,0,780,781,5,73,0,0,781,782,3,112,56,0,782,121,1,0,0,
        0,783,785,5,14,0,0,784,786,3,118,59,0,785,784,1,0,0,0,785,786,1,
        0,0,0,786,787,1,0,0,0,787,792,5,16,0,0,788,790,3,116,58,0,789,788,
        1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,783,1,0,0,0,791,789,
        1,0,0,0,792,123,1,0,0,0,793,794,3,112,56,0,794,795,5,21,0,0,795,
        796,3,122,61,0,796,797,5,22,0,0,797,125,1,0,0,0,798,802,5,14,0,0,
        799,801,3,128,64,0,800,799,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,
        0,802,803,1,0,0,0,803,805,1,0,0,0,804,802,1,0,0,0,805,806,5,16,0,
        0,806,127,1,0,0,0,807,825,3,168,84,0,808,825,3,126,63,0,809,825,
        3,130,65,0,810,825,3,134,67,0,811,825,3,136,68,0,812,825,3,142,71,
        0,813,825,3,144,72,0,814,825,3,146,73,0,815,825,3,150,75,0,816,825,
        3,154,77,0,817,825,3,156,78,0,818,825,5,106,0,0,819,825,5,108,0,
        0,820,825,3,160,80,0,821,825,3,166,83,0,822,825,5,119,0,0,823,825,
        5,103,0,0,824,807,1,0,0,0,824,808,1,0,0,0,824,809,1,0,0,0,824,810,
        1,0,0,0,824,811,1,0,0,0,824,812,1,0,0,0,824,813,1,0,0,0,824,814,
        1,0,0,0,824,815,1,0,0,0,824,816,1,0,0,0,824,817,1,0,0,0,824,818,
        1,0,0,0,824,819,1,0,0,0,824,820,1,0,0,0,824,821,1,0,0,0,824,822,
        1,0,0,0,824,823,1,0,0,0,825,129,1,0,0,0,826,829,3,132,66,0,827,829,
        3,158,79,0,828,826,1,0,0,0,828,827,1,0,0,0,829,131,1,0,0,0,830,835,
        5,46,0,0,831,835,5,34,0,0,832,835,5,52,0,0,833,835,3,168,84,0,834,
        830,1,0,0,0,834,831,1,0,0,0,834,832,1,0,0,0,834,833,1,0,0,0,835,
        848,1,0,0,0,836,838,5,21,0,0,837,839,3,130,65,0,838,837,1,0,0,0,
        838,839,1,0,0,0,839,844,1,0,0,0,840,841,5,15,0,0,841,843,3,130,65,
        0,842,840,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,845,1,0,0,
        0,845,847,1,0,0,0,846,844,1,0,0,0,847,849,5,22,0,0,848,836,1,0,0,
        0,848,849,1,0,0,0,849,133,1,0,0,0,850,851,5,84,0,0,851,854,3,138,
        69,0,852,853,5,85,0,0,853,855,3,130,65,0,854,852,1,0,0,0,854,855,
        1,0,0,0,855,135,1,0,0,0,856,857,3,138,69,0,857,858,5,85,0,0,858,
        859,3,130,65,0,859,137,1,0,0,0,860,866,3,168,84,0,861,862,5,21,0,
        0,862,863,3,140,70,0,863,864,5,22,0,0,864,866,1,0,0,0,865,860,1,
        0,0,0,865,861,1,0,0,0,866,139,1,0,0,0,867,872,3,168,84,0,868,869,
        5,15,0,0,869,871,3,168,84,0,870,868,1,0,0,0,871,874,1,0,0,0,872,
        870,1,0,0,0,872,873,1,0,0,0,873,141,1,0,0,0,874,872,1,0,0,0,875,
        876,5,86,0,0,876,877,3,168,84,0,877,143,1,0,0,0,878,879,3,168,84,
        0,879,880,5,73,0,0,880,145,1,0,0,0,881,882,5,87,0,0,882,886,3,130,
        65,0,883,885,3,148,74,0,884,883,1,0,0,0,885,888,1,0,0,0,886,884,
        1,0,0,0,886,887,1,0,0,0,887,147,1,0,0,0,888,886,1,0,0,0,889,890,
        5,88,0,0,890,891,3,158,79,0,891,892,3,126,63,0,892,896,1,0,0,0,893,
        894,5,89,0,0,894,896,3,126,63,0,895,889,1,0,0,0,895,893,1,0,0,0,
        896,149,1,0,0,0,897,898,5,28,0,0,898,899,3,168,84,0,899,901,5,21,
        0,0,900,902,3,140,70,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,
        0,0,0,903,905,5,22,0,0,904,906,3,152,76,0,905,904,1,0,0,0,905,906,
        1,0,0,0,906,907,1,0,0,0,907,908,3,126,63,0,908,151,1,0,0,0,909,910,
        5,90,0,0,910,911,3,140,70,0,911,153,1,0,0,0,912,915,5,24,0,0,913,
        916,3,126,63,0,914,916,3,130,65,0,915,913,1,0,0,0,915,914,1,0,0,
        0,916,917,1,0,0,0,917,920,3,130,65,0,918,921,3,126,63,0,919,921,
        3,130,65,0,920,918,1,0,0,0,920,919,1,0,0,0,921,922,1,0,0,0,922,923,
        3,126,63,0,923,155,1,0,0,0,924,925,5,41,0,0,925,926,3,130,65,0,926,
        927,3,126,63,0,927,157,1,0,0,0,928,929,7,15,0,0,929,159,1,0,0,0,
        930,931,5,44,0,0,931,932,3,168,84,0,932,933,3,126,63,0,933,161,1,
        0,0,0,934,936,5,21,0,0,935,937,3,112,56,0,936,935,1,0,0,0,936,937,
        1,0,0,0,937,944,1,0,0,0,938,940,5,15,0,0,939,941,3,112,56,0,940,
        939,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,938,1,0,0,0,943,
        946,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,
        944,1,0,0,0,947,961,5,22,0,0,948,957,5,32,0,0,949,954,3,112,56,0,
        950,951,5,15,0,0,951,953,3,112,56,0,952,950,1,0,0,0,953,956,1,0,
        0,0,954,952,1,0,0,0,954,955,1,0,0,0,955,958,1,0,0,0,956,954,1,0,
        0,0,957,949,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,961,5,33,
        0,0,960,934,1,0,0,0,960,948,1,0,0,0,961,163,1,0,0,0,962,965,3,110,
        55,0,963,965,3,66,33,0,964,962,1,0,0,0,964,963,1,0,0,0,965,165,1,
        0,0,0,966,968,7,16,0,0,967,969,5,102,0,0,968,967,1,0,0,0,968,969,
        1,0,0,0,969,167,1,0,0,0,970,971,7,17,0,0,971,169,1,0,0,0,108,173,
        175,189,193,198,205,211,217,221,233,241,246,256,259,265,273,276,
        286,292,298,307,321,324,336,343,346,349,353,358,362,373,375,379,
        385,395,401,412,415,421,424,432,435,441,444,452,455,461,465,476,
        481,486,494,509,511,516,526,543,555,565,571,575,578,585,605,623,
        627,632,636,640,645,650,654,678,737,739,749,756,758,765,773,777,
        785,789,791,802,824,828,834,838,844,848,854,865,872,886,895,901,
        905,915,920,936,940,944,954,957,960,964,968
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'^'", "'~'", "'>='", 
                     "'>'", "'<'", "'<='", "'='", "'as'", "'import'", "'*'", 
                     "'from'", "'{'", "','", "'}'", "'contract'", "'interface'", 
                     "'library'", "'is'", "'('", "')'", "'using'", "'for'", 
                     "'struct'", "'constructor'", "'modifier'", "'function'", 
                     "'returns'", "'event'", "'enum'", "'['", "']'", "'address'", 
                     "'.'", "'mapping'", "'=>'", "'memory'", "'storage'", 
                     "'calldata'", "'if'", "'else'", "'while'", "'assembly'", 
                     "'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", 
                     "'string'", "'byte'", "'++'", "'--'", "'new'", "'+'", 
                     "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", 
                     "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", 
                     "'&&'", "'||'", "'?'", "':'", "'|='", "'^='", "'&='", 
                     "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", 
                     "'->'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'anonymous'", "'break'", 
                     "'constant'", "'continue'", "'external'", "'indexed'", 
                     "'internal'", "'payable'", "'private'", "'public'", 
                     "'pure'", "'type'", "'view'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "NatSpecSingleLine", 
                      "NatSpecMultiLine", "Int", "Uint", "Byte", "Fixed", 
                      "Ufixed", "VersionLiteral", "BooleanLiteral", "DecimalNumber", 
                      "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", 
                      "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
                      "ContinueKeyword", "ExternalKeyword", "IndexedKeyword", 
                      "InternalKeyword", "PayableKeyword", "PrivateKeyword", 
                      "PublicKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
                      "Identifier", "StringLiteral", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_natSpec = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_usingForDeclaration = 14
    RULE_structDefinition = 15
    RULE_constructorDefinition = 16
    RULE_modifierDefinition = 17
    RULE_modifierInvocation = 18
    RULE_functionDefinition = 19
    RULE_returnParameters = 20
    RULE_modifierList = 21
    RULE_eventDefinition = 22
    RULE_enumValue = 23
    RULE_enumDefinition = 24
    RULE_parameterList = 25
    RULE_parameter = 26
    RULE_eventParameterList = 27
    RULE_eventParameter = 28
    RULE_functionTypeParameterList = 29
    RULE_functionTypeParameter = 30
    RULE_variableDeclaration = 31
    RULE_typeName = 32
    RULE_userDefinedTypeName = 33
    RULE_mapping = 34
    RULE_functionTypeName = 35
    RULE_storageLocation = 36
    RULE_stateMutability = 37
    RULE_block = 38
    RULE_statement = 39
    RULE_expressionStatement = 40
    RULE_ifStatement = 41
    RULE_whileStatement = 42
    RULE_simpleStatement = 43
    RULE_forStatement = 44
    RULE_inlineAssemblyStatement = 45
    RULE_doWhileStatement = 46
    RULE_continueStatement = 47
    RULE_breakStatement = 48
    RULE_returnStatement = 49
    RULE_throwStatement = 50
    RULE_emitStatement = 51
    RULE_variableDeclarationStatement = 52
    RULE_variableDeclarationList = 53
    RULE_identifierList = 54
    RULE_elementaryTypeName = 55
    RULE_expression = 56
    RULE_primaryExpression = 57
    RULE_expressionList = 58
    RULE_nameValueList = 59
    RULE_nameValue = 60
    RULE_functionCallArguments = 61
    RULE_functionCall = 62
    RULE_assemblyBlock = 63
    RULE_assemblyItem = 64
    RULE_assemblyExpression = 65
    RULE_assemblyCall = 66
    RULE_assemblyLocalDefinition = 67
    RULE_assemblyAssignment = 68
    RULE_assemblyIdentifierOrList = 69
    RULE_assemblyIdentifierList = 70
    RULE_assemblyStackAssignment = 71
    RULE_labelDefinition = 72
    RULE_assemblySwitch = 73
    RULE_assemblyCase = 74
    RULE_assemblyFunctionDefinition = 75
    RULE_assemblyFunctionReturns = 76
    RULE_assemblyFor = 77
    RULE_assemblyIf = 78
    RULE_assemblyLiteral = 79
    RULE_subAssembly = 80
    RULE_tupleExpression = 81
    RULE_typeNameExpression = 82
    RULE_numberLiteral = 83
    RULE_identifier = 84

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "natSpec", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "constructorDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mapping", "functionTypeName", "storageLocation", "stateMutability", 
                   "block", "statement", "expressionStatement", "ifStatement", 
                   "whileStatement", "simpleStatement", "forStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    NatSpecSingleLine=91
    NatSpecMultiLine=92
    Int=93
    Uint=94
    Byte=95
    Fixed=96
    Ufixed=97
    VersionLiteral=98
    BooleanLiteral=99
    DecimalNumber=100
    HexNumber=101
    NumberUnit=102
    HexLiteral=103
    ReservedKeyword=104
    AnonymousKeyword=105
    BreakKeyword=106
    ConstantKeyword=107
    ContinueKeyword=108
    ExternalKeyword=109
    IndexedKeyword=110
    InternalKeyword=111
    PayableKeyword=112
    PrivateKeyword=113
    PublicKeyword=114
    PureKeyword=115
    TypeKeyword=116
    ViewKeyword=117
    Identifier=118
    StringLiteral=119
    WS=120
    COMMENT=121
    LINE_COMMENT=122

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 919554) != 0) or _la==91 or _la==92:
                self.state = 173
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 170
                    self.pragmaDirective()
                    pass
                elif token in [11]:
                    self.state = 171
                    self.importDirective()
                    pass
                elif token in [17, 18, 19, 91, 92]:
                    self.state = 172
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 178
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.match(SolidityParser.T__0)
            self.state = 181
            self.pragmaName()
            self.state = 182
            self.pragmaValue()
            self.state = 183
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 187
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 188
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.versionConstraint()
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0) or _la==98:
                self.state = 192
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1016) != 0):
                self.state = 197
                self.versionOperator()


            self.state = 200
            self.match(SolidityParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.identifier()
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 203
                self.match(SolidityParser.T__9)
                self.state = 204
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 207
                self.match(SolidityParser.T__10)
                self.state = 208
                self.match(SolidityParser.StringLiteral)
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 209
                    self.match(SolidityParser.T__9)
                    self.state = 210
                    self.identifier()


                self.state = 213
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.match(SolidityParser.T__10)
                self.state = 217
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [12]:
                    self.state = 215
                    self.match(SolidityParser.T__11)
                    pass
                elif token in [13, 40, 118]:
                    self.state = 216
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 219
                    self.match(SolidityParser.T__9)
                    self.state = 220
                    self.identifier()


                self.state = 223
                self.match(SolidityParser.T__12)
                self.state = 224
                self.match(SolidityParser.StringLiteral)
                self.state = 225
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.match(SolidityParser.T__10)
                self.state = 227
                self.match(SolidityParser.T__13)
                self.state = 228
                self.importDeclaration()
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 229
                    self.match(SolidityParser.T__14)
                    self.state = 230
                    self.importDeclaration()
                    self.state = 235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 236
                self.match(SolidityParser.T__15)
                self.state = 237
                self.match(SolidityParser.T__12)
                self.state = 238
                self.match(SolidityParser.StringLiteral)
                self.state = 239
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NatSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NatSpecSingleLine(self):
            return self.getToken(SolidityParser.NatSpecSingleLine, 0)

        def NatSpecMultiLine(self):
            return self.getToken(SolidityParser.NatSpecMultiLine, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_natSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatSpec" ):
                listener.enterNatSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatSpec" ):
                listener.exitNatSpec(self)




    def natSpec(self):

        localctx = SolidityParser.NatSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_natSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            _la = self._input.LA(1)
            if not(_la==91 or _la==92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityParser.NatSpecContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91 or _la==92:
                self.state = 245
                self.natSpec()


            self.state = 248
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 917504) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 249
            self.identifier()
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 250
                self.match(SolidityParser.T__19)
                self.state = 251
                self.inheritanceSpecifier()
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 252
                    self.match(SolidityParser.T__14)
                    self.state = 253
                    self.inheritanceSpecifier()
                    self.state = 258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 261
            self.match(SolidityParser.T__13)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8445438445232128) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 134217855) != 0):
                self.state = 262
                self.contractPart()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 268
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.userDefinedTypeName()
            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 271
                self.match(SolidityParser.T__20)
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                    self.state = 272
                    self.expressionList()


                self.state = 275
                self.match(SolidityParser.T__21)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 278
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 279
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 280
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 281
                self.constructorDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 282
                self.modifierDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 283
                self.functionDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 284
                self.eventDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 285
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.typeName(0)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 209) != 0):
                self.state = 289
                _la = self._input.LA(1)
                if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 209) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            self.identifier()
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 296
                self.match(SolidityParser.T__8)
                self.state = 297
                self.expression(0)


            self.state = 300
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(SolidityParser.T__22)
            self.state = 303
            self.identifier()
            self.state = 304
            self.match(SolidityParser.T__23)
            self.state = 307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.state = 305
                self.match(SolidityParser.T__11)
                pass
            elif token in [13, 28, 34, 36, 40, 49, 50, 51, 52, 93, 94, 95, 96, 97, 118]:
                self.state = 306
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 309
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(SolidityParser.T__24)
            self.state = 312
            self.identifier()
            self.state = 313
            self.match(SolidityParser.T__13)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8445434980737024) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 33554463) != 0):
                self.state = 314
                self.variableDeclaration()
                self.state = 315
                self.match(SolidityParser.T__1)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8445434980737024) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 33554463) != 0):
                    self.state = 316
                    self.variableDeclaration()
                    self.state = 317
                    self.match(SolidityParser.T__1)
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 326
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)




    def constructorDefinition(self):

        localctx = SolidityParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(SolidityParser.T__25)
            self.state = 329
            self.parameterList()
            self.state = 330
            self.modifierList()
            self.state = 331
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(SolidityParser.T__26)
            self.state = 334
            self.identifier()
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 335
                self.parameterList()


            self.state = 338
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.identifier()
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 341
                self.match(SolidityParser.T__20)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                    self.state = 342
                    self.expressionList()


                self.state = 345
                self.match(SolidityParser.T__21)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityParser.NatSpecContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91 or _la==92:
                self.state = 348
                self.natSpec()


            self.state = 351
            self.match(SolidityParser.T__27)
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==40 or _la==118:
                self.state = 352
                self.identifier()


            self.state = 355
            self.parameterList()
            self.state = 356
            self.modifierList()
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 357
                self.returnParameters()


            self.state = 362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 360
                self.match(SolidityParser.T__1)
                pass
            elif token in [14]:
                self.state = 361
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(SolidityParser.T__28)
            self.state = 365
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13 or _la==40 or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 3573) != 0):
                self.state = 373
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 40, 118]:
                    self.state = 367
                    self.modifierInvocation()
                    pass
                elif token in [107, 112, 115, 117]:
                    self.state = 368
                    self.stateMutability()
                    pass
                elif token in [109]:
                    self.state = 369
                    self.match(SolidityParser.ExternalKeyword)
                    pass
                elif token in [114]:
                    self.state = 370
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [111]:
                    self.state = 371
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [113]:
                    self.state = 372
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityParser.NatSpecContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91 or _la==92:
                self.state = 378
                self.natSpec()


            self.state = 381
            self.match(SolidityParser.T__29)
            self.state = 382
            self.identifier()
            self.state = 383
            self.eventParameterList()
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 384
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 387
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(SolidityParser.T__30)
            self.state = 392
            self.identifier()
            self.state = 393
            self.match(SolidityParser.T__13)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==40 or _la==118:
                self.state = 394
                self.enumValue()


            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 397
                self.match(SolidityParser.T__14)
                self.state = 398
                self.enumValue()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 404
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(SolidityParser.T__20)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8445434980737024) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 33554463) != 0):
                self.state = 407
                self.parameter()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 408
                    self.match(SolidityParser.T__14)
                    self.state = 409
                    self.parameter()
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 417
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.typeName(0)
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 420
                self.storageLocation()


            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==40 or _la==118:
                self.state = 423
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(SolidityParser.T__20)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8445434980737024) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 33554463) != 0):
                self.state = 427
                self.eventParameter()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 428
                    self.match(SolidityParser.T__14)
                    self.state = 429
                    self.eventParameter()
                    self.state = 434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 437
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.typeName(0)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 440
                self.match(SolidityParser.IndexedKeyword)


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==40 or _la==118:
                self.state = 443
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(SolidityParser.T__20)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8445434980737024) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 33554463) != 0):
                self.state = 447
                self.functionTypeParameter()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 448
                    self.match(SolidityParser.T__14)
                    self.state = 449
                    self.functionTypeParameter()
                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 457
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.typeName(0)
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1924145348608) != 0):
                self.state = 460
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.typeName(0)
            self.state = 465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 464
                self.storageLocation()


            self.state = 467
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 470
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 471
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 472
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 473
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 474
                self.match(SolidityParser.T__33)
                self.state = 475
                self.match(SolidityParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 486
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 478
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 479
                    self.match(SolidityParser.T__31)
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                        self.state = 480
                        self.expression(0)


                    self.state = 483
                    self.match(SolidityParser.T__32) 
                self.state = 488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.identifier()
            self.state = 494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 490
                    self.match(SolidityParser.T__34)
                    self.state = 491
                    self.identifier() 
                self.state = 496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(SolidityParser.T__35)
            self.state = 498
            self.match(SolidityParser.T__20)
            self.state = 499
            self.elementaryTypeName()
            self.state = 500
            self.match(SolidityParser.T__36)
            self.state = 501
            self.typeName(0)
            self.state = 502
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(SolidityParser.T__27)
            self.state = 505
            self.functionTypeParameterList()
            self.state = 511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 509
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [111]:
                        self.state = 506
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [109]:
                        self.state = 507
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [107, 112, 115, 117]:
                        self.state = 508
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 514
                self.match(SolidityParser.T__28)
                self.state = 515
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1924145348608) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            _la = self._input.LA(1)
            if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 1313) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(SolidityParser.T__13)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305837602137202704) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109094367) != 0):
                self.state = 523
                self.statement()
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 529
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_statement)
        try:
            self.state = 543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.ifStatement()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.whileStatement()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 3)
                self.state = 533
                self.forStatement()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 534
                self.block()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 5)
                self.state = 535
                self.inlineAssemblyStatement()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 6)
                self.state = 536
                self.doWhileStatement()
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 7)
                self.state = 537
                self.continueStatement()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 8)
                self.state = 538
                self.breakStatement()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 9)
                self.state = 539
                self.returnStatement()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 10)
                self.state = 540
                self.throwStatement()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 11)
                self.state = 541
                self.emitStatement()
                pass
            elif token in [4, 13, 21, 28, 32, 34, 36, 40, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 96, 97, 99, 100, 101, 103, 116, 118, 119]:
                self.enterOuterAlt(localctx, 12)
                self.state = 542
                self.simpleStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.expression(0)
            self.state = 546
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(SolidityParser.T__40)
            self.state = 549
            self.match(SolidityParser.T__20)
            self.state = 550
            self.expression(0)
            self.state = 551
            self.match(SolidityParser.T__21)
            self.state = 552
            self.statement()
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 553
                self.match(SolidityParser.T__41)
                self.state = 554
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(SolidityParser.T__42)
            self.state = 558
            self.match(SolidityParser.T__20)
            self.state = 559
            self.expression(0)
            self.state = 560
            self.match(SolidityParser.T__21)
            self.state = 561
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 563
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 564
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(SolidityParser.T__23)
            self.state = 568
            self.match(SolidityParser.T__20)
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 13, 21, 28, 32, 34, 36, 40, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 96, 97, 99, 100, 101, 103, 116, 118, 119]:
                self.state = 569
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 570
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 13, 21, 32, 34, 40, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 96, 97, 99, 100, 101, 103, 116, 118, 119]:
                self.state = 573
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 574
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                self.state = 577
                self.expression(0)


            self.state = 580
            self.match(SolidityParser.T__21)
            self.state = 581
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(SolidityParser.T__43)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 584
                self.match(SolidityParser.StringLiteral)


            self.state = 587
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(SolidityParser.T__44)
            self.state = 590
            self.statement()
            self.state = 591
            self.match(SolidityParser.T__42)
            self.state = 592
            self.match(SolidityParser.T__20)
            self.state = 593
            self.expression(0)
            self.state = 594
            self.match(SolidityParser.T__21)
            self.state = 595
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(SolidityParser.ContinueKeyword)
            self.state = 598
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(SolidityParser.BreakKeyword)
            self.state = 601
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(SolidityParser.T__45)
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                self.state = 604
                self.expression(0)


            self.state = 607
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(SolidityParser.T__46)
            self.state = 610
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(SolidityParser.T__47)
            self.state = 613
            self.functionCall()
            self.state = 614
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 616
                self.match(SolidityParser.T__48)
                self.state = 617
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 618
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 619
                self.match(SolidityParser.T__20)
                self.state = 620
                self.variableDeclarationList()
                self.state = 621
                self.match(SolidityParser.T__21)
                pass


            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 625
                self.match(SolidityParser.T__8)
                self.state = 626
                self.expression(0)


            self.state = 629
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8445434980737024) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 33554463) != 0):
                self.state = 631
                self.variableDeclaration()


            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 634
                self.match(SolidityParser.T__14)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8445434980737024) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 33554463) != 0):
                    self.state = 635
                    self.variableDeclaration()


                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(SolidityParser.T__20)
            self.state = 650
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==40 or _la==118:
                        self.state = 644
                        self.identifier()


                    self.state = 647
                    self.match(SolidityParser.T__14) 
                self.state = 652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==40 or _la==118:
                self.state = 653
                self.identifier()


            self.state = 656
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & -576460752302931967) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 661
                self.match(SolidityParser.T__54)
                self.state = 662
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 663
                self.match(SolidityParser.T__20)
                self.state = 664
                self.expression(0)
                self.state = 665
                self.match(SolidityParser.T__21)
                pass

            elif la_ == 3:
                self.state = 667
                _la = self._input.LA(1)
                if not(_la==53 or _la==54):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 668
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 669
                _la = self._input.LA(1)
                if not(_la==56 or _la==57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 670
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 671
                _la = self._input.LA(1)
                if not(_la==58 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 672
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 673
                self.match(SolidityParser.T__59)
                self.state = 674
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 675
                self.match(SolidityParser.T__3)
                self.state = 676
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 677
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 739
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 737
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 680
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 681
                        self.match(SolidityParser.T__60)
                        self.state = 682
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 683
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 684
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018427383808) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 685
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 686
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 687
                        _la = self._input.LA(1)
                        if not(_la==56 or _la==57):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 688
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 689
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 690
                        _la = self._input.LA(1)
                        if not(_la==64 or _la==65):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 691
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 692
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 693
                        self.match(SolidityParser.T__65)
                        self.state = 694
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 695
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 696
                        self.match(SolidityParser.T__2)
                        self.state = 697
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 698
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 699
                        self.match(SolidityParser.T__66)
                        self.state = 700
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 701
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 702
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 480) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 703
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 704
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 705
                        _la = self._input.LA(1)
                        if not(_la==68 or _la==69):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 706
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 707
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 708
                        self.match(SolidityParser.T__69)
                        self.state = 709
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 710
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 711
                        self.match(SolidityParser.T__70)
                        self.state = 712
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 713
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 714
                        self.match(SolidityParser.T__71)
                        self.state = 715
                        self.expression(0)
                        self.state = 716
                        self.match(SolidityParser.T__72)
                        self.state = 717
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 719
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 720
                        _la = self._input.LA(1)
                        if not(_la==9 or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 1023) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 721
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 722
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 723
                        _la = self._input.LA(1)
                        if not(_la==53 or _la==54):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 724
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 725
                        self.match(SolidityParser.T__31)
                        self.state = 726
                        self.expression(0)
                        self.state = 727
                        self.match(SolidityParser.T__32)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 729
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 730
                        self.match(SolidityParser.T__20)
                        self.state = 731
                        self.functionCallArguments()
                        self.state = 732
                        self.match(SolidityParser.T__21)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 734
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 735
                        self.match(SolidityParser.T__34)
                        self.state = 736
                        self.identifier()
                        pass

             
                self.state = 741
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_primaryExpression)
        try:
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.match(SolidityParser.HexLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                self.match(SolidityParser.StringLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 746
                self.identifier()
                self.state = 749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 747
                    self.match(SolidityParser.T__31)
                    self.state = 748
                    self.match(SolidityParser.T__32)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 751
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 752
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 753
                self.typeNameExpression()
                self.state = 756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 754
                    self.match(SolidityParser.T__31)
                    self.state = 755
                    self.match(SolidityParser.T__32)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.expression(0)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 761
                self.match(SolidityParser.T__14)
                self.state = 762
                self.expression(0)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.nameValue()
            self.state = 773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 769
                    self.match(SolidityParser.T__14)
                    self.state = 770
                    self.nameValue() 
                self.state = 775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 776
                self.match(SolidityParser.T__14)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.identifier()
            self.state = 780
            self.match(SolidityParser.T__72)
            self.state = 781
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.match(SolidityParser.T__13)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==40 or _la==118:
                    self.state = 784
                    self.nameValueList()


                self.state = 787
                self.match(SolidityParser.T__15)
                pass
            elif token in [4, 13, 21, 22, 32, 34, 40, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 96, 97, 99, 100, 101, 103, 116, 118, 119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                    self.state = 788
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.expression(0)
            self.state = 794
            self.match(SolidityParser.T__20)
            self.state = 795
            self.functionCallArguments()
            self.state = 796
            self.match(SolidityParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(SolidityParser.T__13)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4594876559679488) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 51561299981) != 0):
                self.state = 799
                self.assemblyItem()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 805
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_assemblyItem)
        try:
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 809
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 810
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 811
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 812
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 813
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 814
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 815
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 816
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 817
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 818
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 819
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 820
                self.subAssembly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 821
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 822
                self.match(SolidityParser.StringLiteral)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 823
                self.match(SolidityParser.HexLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_assemblyExpression)
        try:
            self.state = 828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 34, 40, 46, 52, 118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.assemblyCall()
                pass
            elif token in [100, 101, 103, 119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.state = 830
                self.match(SolidityParser.T__45)
                pass
            elif token in [34]:
                self.state = 831
                self.match(SolidityParser.T__33)
                pass
            elif token in [52]:
                self.state = 832
                self.match(SolidityParser.T__51)
                pass
            elif token in [13, 40, 118]:
                self.state = 833
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 836
                self.match(SolidityParser.T__20)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4575085063053312) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 786443) != 0):
                    self.state = 837
                    self.assemblyExpression()


                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 840
                    self.match(SolidityParser.T__14)
                    self.state = 841
                    self.assemblyExpression()
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 847
                self.match(SolidityParser.T__21)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(SolidityParser.T__83)
            self.state = 851
            self.assemblyIdentifierOrList()
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 852
                self.match(SolidityParser.T__84)
                self.state = 853
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.assemblyIdentifierOrList()
            self.state = 857
            self.match(SolidityParser.T__84)
            self.state = 858
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 40, 118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 860
                self.identifier()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.match(SolidityParser.T__20)
                self.state = 862
                self.assemblyIdentifierList()
                self.state = 863
                self.match(SolidityParser.T__21)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.identifier()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 868
                self.match(SolidityParser.T__14)
                self.state = 869
                self.identifier()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(SolidityParser.T__85)
            self.state = 876
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.identifier()
            self.state = 879
            self.match(SolidityParser.T__72)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(SolidityParser.T__86)
            self.state = 882
            self.assemblyExpression()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88 or _la==89:
                self.state = 883
                self.assemblyCase()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblyCase)
        try:
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.match(SolidityParser.T__87)
                self.state = 890
                self.assemblyLiteral()
                self.state = 891
                self.assemblyBlock()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(SolidityParser.T__88)
                self.state = 894
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(SolidityParser.T__27)
            self.state = 898
            self.identifier()
            self.state = 899
            self.match(SolidityParser.T__20)
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==40 or _la==118:
                self.state = 900
                self.assemblyIdentifierList()


            self.state = 903
            self.match(SolidityParser.T__21)
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 904
                self.assemblyFunctionReturns()


            self.state = 907
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(SolidityParser.T__89)
            self.state = 910
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(SolidityParser.T__23)
            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 913
                self.assemblyBlock()
                pass
            elif token in [13, 34, 40, 46, 52, 100, 101, 103, 118, 119]:
                self.state = 914
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 917
            self.assemblyExpression()
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 918
                self.assemblyBlock()
                pass
            elif token in [13, 34, 40, 46, 52, 100, 101, 103, 118, 119]:
                self.state = 919
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 922
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(SolidityParser.T__40)
            self.state = 925
            self.assemblyExpression()
            self.state = 926
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SolidityParser.StringLiteral, 0)

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def HexLiteral(self):
            return self.getToken(SolidityParser.HexLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            _la = self._input.LA(1)
            if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 524299) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(SolidityParser.T__43)
            self.state = 931
            self.identifier()
            self.state = 932
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.match(SolidityParser.T__20)

                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                    self.state = 935
                    self.expression(0)


                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 938
                    self.match(SolidityParser.T__14)
                    self.state = 940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                        self.state = 939
                        self.expression(0)


                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 947
                self.match(SolidityParser.T__21)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.match(SolidityParser.T__31)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305281180248842256) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 109053407) != 0):
                    self.state = 949
                    self.expression(0)
                    self.state = 954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 950
                        self.match(SolidityParser.T__14)
                        self.state = 951
                        self.expression(0)
                        self.state = 956
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 959
                self.match(SolidityParser.T__32)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_typeNameExpression)
        try:
            self.state = 964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 49, 50, 51, 52, 93, 94, 95, 96, 97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.elementaryTypeName()
                pass
            elif token in [13, 40, 118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            _la = self._input.LA(1)
            if not(_la==100 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 967
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            _la = self._input.LA(1)
            if not(_la==13 or _la==40 or _la==118):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.typeName_sempred
        self._predicates[56] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         




